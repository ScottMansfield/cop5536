Scott Mansfield
UFID 1039-7813
COP 5536 Project 1

11111111111111111111111111111111111111111111111111111111111111111111111111111111
1) State what compiler you use, how to compile, and etc.
11111111111111111111111111111111111111111111111111111111111111111111111111111111

For development, the environment was as follows:
OS: Windows 7
IDE: Netbeans IDE version 7.3.1
Java version: 1.7.0 update 25

On the CISE machines, the package contains the build.xml used to compile the program.

From the directory that contains the build.xml file, simply type "ant" to compile
the program into a jar under the dist/ directory. In addition, the standard target
will generate the class filed in the build/ directory and javadoc for the project
in the dist/javadoc/ directory.

The Netbeans IDE provides a generic build.xml file that did not need to be customized
for the purposes of this project. The one provided by the IDE that contains all
of the real logic is included in the nbproject/ folder and is just included in the
main project build.xml.

To run the program from the directory it was built (i.e. where you typed "ant")
type something like the following:

  java -jar dist/COP5536_Project_1.jar <CMD LINE ARGS>

To run a random test:

  java -jar dist/COP5536_Project_1.jar -r

To run the instructions in the file example_instructions.txt on a Binomial Heap:

  java -jar dist/COP5536_Project_1.jar -ib example_instructions.txt

To run the instructions in the file example_instructions.txt on a Leftist Tree:

  java -jar dist/COP5536_Project_1.jar -il example_instructions.txt


22222222222222222222222222222222222222222222222222222222222222222222222222222222
2) Function prototypes showing the structure of your programs.
22222222222222222222222222222222222222222222222222222222222222222222222222222222

Here I will list all of the packages, classes and interfaces within those packages,
and the methods those classes and interfaces contain. For complete documentation,
read the comments in the code or the generated javadoc in the dist/javadoc/ directory.

Package: com.sgmansfield.cop5536.one
    Class: FileParser
        Method: public static List<Instruction> parseFile(String fileName) throws FileNotFoundException
    Class: Main
        Method: public static void main(String[] args) throws FileNotFoundException
        Method: public static void randomTest()
        Method: public static void fillHeap(Heap heap, List<Integer> items)
        Method: public static double timeInstructions(Heap heap, List<Instruction> instructions)
        Method: public static void fileInputTest(String cmdSwitch, String fileName) throws FileNotFoundException
        Method: public static void runInstructons(List<Instruction> instructions, Heap heap)
        Method: private static void printUsage()
    Class: RandomListGen
        Method: public static List<Instruction> randomInstructions(int size, int maxNum)
        Method: public static List<Integer> randomIntegerPermutation(int size)
        Method: private static void swap(List<Integer> numbers, int pos1, int pos2)
Package: com.sgmansfield.cop5536.one.heap
    Interface: Heap
        Method: public void insert(int num)
        Method: public Integer deleteMin()
    Class: Instruction
        Constructor: public Instruction(Operation operation, int number)
        Method: public Operation getOperation()
        Method: public int getNumber()
    Enum: Operation
        Members: INSERT, DELETEMIN
Package: com.sgmansfield.cop5536.one.heap.binomial
    Class: BinomialHeap implements Heap
        Method: public void insert(int num) // from interface Heap
        Method: public Integer deleteMin()  // from interface Heap
        Method: public String toString()    // from Object
    Class: BinomialNode
        Constructor: public BinomialNode(int data, int degree, BinomialNode next, BinomialNode child)
        Method: clone() // from Object
        Method: public int getData()
        Method: public void setData(int data)
        Method: public int getDegree()
        Method: public void setDegree(int degree)
        Method: public BinomialNode getNext()
        Method: public void setNext(BinomialNode next)
        Method: public BinomialNode getChild()
        Method: public void setChild(BinomialNode child)
Package: com.sgmansfield.cop5536.one.heap.leftisttree
    Class: LeftistNode
        Constructor: public LeftistNode(int data, LeftistNode right, LeftistNode left, int rightDistance)
        Method: public int getData()
        Method: public LeftistNode getRight()
        Method: public void setRight(LeftistNode right)
        Method: public LeftistNode getLeft()
        Method: public void setLeft(LeftistNode left)
        Method: public int getRightDistance()
        Method: public void setRightDistance(int rightDistance)
    Class: LeftistTreeHeap implements Heap
        Method: public void insert(int num) // from interface Heap
        Method: public Integer deleteMin()  // from interface Heap
        Method: public String toString()    // from Object


33333333333333333333333333333333333333333333333333333333333333333333333333333333
3) A summary of result comparison: You should put first your expectation of the
3) comparison before running your program: i.e. what you think about the relative
3) performance of each scheme, and why.
33333333333333333333333333333333333333333333333333333333333333333333333333333333

My expectation for these two heaps prior to seeing the numbers was definitely in
line with the reality. The Binomial Heap is much more complicated because of the
structure of the data. Using linked lists is always a pain and it certainly caused
several headaches along the way because of the variable management in code.

In contrast, the leftist tree has a very simple binary tree structure, just augmented
with the right distance data to allow for a lopsided tree. The concept is much easier
to grasp and an order of magnitude easier to program.

Given the binomial heap's complexity, I was a bit skeptical of the speed it would
produce. Part of me wanted to believe that the added complexity helps over a large
list of operations, but that side was overpowered by the argument that the structure
is just too complex to be worth it.

To link the heaps to the numbers, I see approximately 4-5 (or even 6) times more
time taken to run operations on a binomial heap than on a leftist tree on average.

On my windows laptop, a representative random run looks like the following:

Binomial heap average time for size 100: 5.3081515 ms
Leftist Tree heap average time for size 100: 1.0484044000000001 ms
Binomial heap average time for size 500: 1.1320264 ms
Leftist Tree heap average time for size 500: 0.3527405 ms
Binomial heap average time for size 1000: 1.8610233 ms
Leftist Tree heap average time for size 1000: 0.4306512 ms
Binomial heap average time for size 2000: 2.4399996 ms
Leftist Tree heap average time for size 2000: 0.494818 ms
Binomial heap average time for size 3000: 2.248391 ms
Leftist Tree heap average time for size 3000: 0.5144073 ms
Binomial heap average time for size 4000: 2.7008178 ms
Leftist Tree heap average time for size 4000: 0.5837956 ms
Binomial heap average time for size 5000: 2.8162558 ms
Leftist Tree heap average time for size 5000: 0.6097657 ms

As you can see, the binomial heap is always slower. This confirms my hypothesis
that the added complexity is not worth the effort over a leftist tree.

I think the main downfall of the binomial heap is the multiple-tree structure. The
idea of keeping these sets of trees together at the top level in a linked list just
baffles me. It makes inserts fast, but at the cost of the next delete-min operation
taking forever to complete. As was stated in class, the common case is that all
values inserted into the heap are removed by the end of the program means that the
overall time of the binomial heap is going to be higher pretty much all the time
even if it is bounded by log(n) for delete-min amortized.


44444444444444444444444444444444444444444444444444444444444444444444444444444444
4) Please include the structure of your program. List of function prototypes is not enough.
44444444444444444444444444444444444444444444444444444444444444444444444444444444

The list of packages, classes, and functions is in the answer for question 2. I
will refer to that answer in this one, where I explain the purpose of each component.

The full documentation can be found in the code comments or the generated javadoc.

There are four main packages:

com.sgmansfield.cop5536.one
    contains the entry point and main application logic. The classes here are used
    to run the program and do things like list generation and file parsing. The main
    application generally codes to the Heap interface provided by the heap package
    and only drops down to the implementations during instantiation. This allows
    for the best comparison since the code to perform operations is identical for
    both heap implementations. The Main class contains pretty much all of the logic
    in static methods because, frankly, it was easier to do so. The methods are
    not used elsewhere but are marked public so the javadoc mechanism will pick
    them up and produce documentation for them.

com.sgmansfield.cop5536.one.heap
    contains the heap interface, the Instruction class, and Operation enum that
    relate to heaps in general. These are used by the main application logic to
    generate and run sets of instructions on the heaps. The Heap interface defines
    what the heap implementations look like to the main application. It should be
    noted that the interface Heap and enum Operation assume a min heap implementation
    since the project was to implement min heaps. This would not serve as a generic
    heap interface if an implementation was a max heap. The nodes for the individual
    heap implementations are in their respective packages because
    1) Internal elements of a heap should not be a part of the interface.
    2) They are different for each kind of heap.

com.sgmansfield.cop5536.one.heap.binomial
    contains the Binomial Heap implementation of the Heap interface. The BinomialHeap
    class contains the logic to implement the Heap operations as well as the logic
    to print the heap to a string. The BinomialNode class contains the definition
    of a node in a binomial heap.

com.sgmansfield.cop5536.one.heap.leftisttreee
    contains the Leftist Tree implementation of the Heap interface. The LeftistTreeHeap
    class contains the logic to implement the Heap operations as well as the logic
    to print the heap to a string. The LeftistNode class contains the definition
    of a node in a leftist tree.
